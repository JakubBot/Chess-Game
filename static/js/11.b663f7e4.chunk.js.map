{"version":3,"sources":["components/utils/gameUtils/computerGameUtils.js","containers/ComputerGamePage/index.js"],"names":["getPieceValue","piece","i","j","tableFromType","p","n","b","r","q","k","type","evaluation","color","minimax","game","depth","isMaxPlayer","alpha","beta","moves","possibilities","length","board","boardEval","evaluateBoard","bestScore","Infinity","move","Math","max","undo","min","$","window","jQuery","Chess","mapDispatchToProps","updateMoves","boardActions","updateStatusText","loginUserWithSocials","userActions","loginUserWithForm","updateLocalStorage","connect","state","boardInfo","statusText","boardType","user","currentStatusText","history","useAuthState","auth","authUser","useState","whiteSan","blackSan","id","index","gameMove","setGameMove","whiteTime","blackTime","isGameActive","timeLeft","setTimeLeft","isGameEndByTime","setIsGameEndByTime","songRef","useRef","updateStatus","statusGame","turn","isMyTurn","in_draw","in_check","in_checkmate","in_threefold_repetition","insufficient_material","in_stalemate","useEffect","reset","prevState","game_over","timer","setInterval","clearInterval","generateID","makeEngineMove","bestMove","_moves","newMove","push","score","find","san","minimaxRoot","position","fen","current","play","config","pieceTheme","process","draggable","onDragStart","square","makeDots","allowMove","onDrop","source","target","removeDotSquares","from","to","promotion","setTimeout","onSnapEnd","onMouseoutSquare","onMouseoverSquare","Chessboard","resize","$board","squares","addClass","removeClass","className","EndGameCard","Game","links","playerNum","isGameEnded","changeSite","userName","points","ScoreBoard"],"mappings":"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","file":"static/js/11.b663f7e4.chunk.js","sourcesContent":["/* eslint-disable no-param-reassign */\n/* eslint-disable no-plusplus */\nexport function getPieceValue(piece, i, j) {\n  const pawnEvalWhite = [\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0],\n    [1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0],\n    [0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5],\n    [0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0],\n    [0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5],\n    [0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5],\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n  ];\n  const knightEvalWhite = [\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n    [-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0],\n    [-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0],\n    [-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0],\n    [-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0],\n    [-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0],\n    [-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0],\n    [-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0],\n  ];\n  const bishopEvalWhite = [\n    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n    [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\n    [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0],\n    [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0],\n    [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0],\n    [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0],\n    [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0],\n    [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],\n  ];\n  const rookEvalWhite = [\n    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],\n    [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0],\n  ];\n  const queenEvalWhite = [\n    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n    [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],\n    [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\n    [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\n    [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],\n    [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],\n    [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0],\n    [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],\n  ];\n  const kingEvalWhite = [\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],\n    [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],\n    [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],\n    [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],\n    [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0],\n  ];\n  const pieceToTables = {\n    p: pawnEvalWhite,\n    n: knightEvalWhite,\n    b: bishopEvalWhite,\n    r: rookEvalWhite,\n    q: queenEvalWhite,\n    k: kingEvalWhite,\n  };\n  const pieceValues = {\n    p: 10,\n    n: 30,\n    b: 35,\n    r: 50,\n    q: 90,\n    k: 900,\n  };\n  if (piece === null) {\n    return 0;\n  }\n  const tableFromType = pieceToTables[piece.type];\n  let evaluation = pieceValues[piece.type]; // getting pieceValue\n  // adding the evaluation tables\n  if (piece.color === 'w') {\n    evaluation += tableFromType[i][j];\n  } else {\n    evaluation += tableFromType[7 - i][j];\n  }\n  return piece.color === 'w' ? evaluation : -evaluation;\n}\n\nexport function minimaxRoot(game, depth, isMaxPlayer) {\n  const moves = game.moves();\n  let bestMove;\n  const _moves = [];\n  const possibilities = moves.length;\n  let bestScore = -Infinity;\n  for (let k = 0; k < possibilities; k++) {\n    const newMove = moves[k];\n\n    _moves.push(game.move(newMove));\n    const score = minimax(game, depth - 1, !isMaxPlayer, -Infinity, Infinity);\n\n    game.undo();\n    if (score >= bestScore) {\n      bestScore = score;\n      bestMove = newMove;\n    }\n  }\n  const move = _moves.find((move) => move.san === bestMove);\n  return { bestMove, move };\n}\n\nfunction minimax(game, depth, isMaxPlayer, alpha, beta) {\n  const moves = game.moves();\n  const possibilities = moves.length;\n  if (depth === 0) {\n    return -evaluateBoard(game.board());\n  }\n  if (isMaxPlayer) {\n    let bestScore = -Infinity;\n    for (let j = 0; j < possibilities; j++) {\n      game.move(moves[j]);\n      bestScore = Math.max(\n        bestScore,\n        minimax(game, depth - 1, !isMaxPlayer, alpha, beta)\n      );\n      game.undo();\n      alpha = Math.max(alpha, bestScore);\n      if (alpha >= beta) {\n        return bestScore;\n      }\n    }\n    return bestScore;\n  }\n  let bestScore = Infinity;\n  for (let i = 0; i < possibilities; i++) {\n    game.move(moves[i]);\n    bestScore = Math.min(\n      bestScore,\n      minimax(game, depth - 1, !isMaxPlayer, alpha, beta)\n    );\n    game.undo();\n    beta = Math.min(beta, bestScore);\n    if (alpha >= beta) {\n      return bestScore;\n    }\n  }\n  return bestScore;\n}\nexport function evaluateBoard(board) {\n  let boardEval = 0;\n  // const board = game.board();\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      boardEval += getPieceValue(board[i][j], i, j);\n    }\n  }\n  return boardEval;\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Chess from 'chess.js/chess';\nimport Chessboard from '@chrisoakman/chessboardjs/dist/chessboard-1.0.0';\nimport { connect } from 'react-redux';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport ScoreBoard from '../../components/ScoreBoard';\nimport Game from '../../components/common/Game';\nimport { auth } from '../../firebase-config';\nimport { minimaxRoot } from '../../components/utils/gameUtils/computerGameUtils';\nimport {\n  removeDotSquares,\n  allowMove,\n  makeDots,\n  statusText,\n  isMyTurn,\n} from '../../components/utils/gameUtils/commonGameUtils';\nimport { generateID } from '../../components/utils';\nimport * as userActions from '../../redux/actions/userActions';\nimport * as boardActions from '../../redux/actions/boardActions';\nimport EndGameCard from '../../components/EndGameCard';\n\nconst $ = window.jQuery;\nlet board = null;\nconst game = new Chess();\nconst maxDepth = 2;\n\nconst ComputerGamePage = ({\n  history,\n  boardType,\n  user,\n  piece,\n  updateMoves,\n  updateStatusText,\n  moves,\n  currentStatusText,\n  loginUserWithSocials,\n  loginUserWithForm,\n  updateLocalStorage,\n}) => {\n  const [authUser] = useAuthState(auth);\n  const [gameMove, setGameMove] = useState({\n    whiteSan: '',\n    blackSan: '',\n    id: null,\n    index: 0,\n  });\n  const [timeLeft, setTimeLeft] = useState({\n    whiteTime: 300,\n    blackTime: 300,\n    isGameActive: false,\n  });\n  const [isGameEndByTime, setIsGameEndByTime] = useState(false);\n  const songRef = useRef(null);\n  useEffect(() => {\n    if (authUser !== null && user === null) {\n      loginUserWithSocials(authUser);\n    }\n    if (authUser === null && user === null) {\n      loginUserWithForm();\n    }\n    return () => game.reset();\n  }, [authUser]);\n\n  useEffect(() => {\n    setTimeLeft((prevState) => ({\n      ...prevState,\n      isGameActive: false,\n    }));\n  }, [game.game_over(), isGameEndByTime]);\n\n  useEffect(() => {\n    let timer = null;\n    if (timeLeft.isGameActive) {\n      timer = setInterval(() => {\n        updateTimeLeft();\n      }, 1000);\n    }\n    if (timeLeft.whiteTime <= 0 || timeLeft.blackTime <= 0) {\n      clearInterval(timer);\n      setIsGameEndByTime(true);\n    }\n    return () => clearInterval(timer);\n  }, [timeLeft.isGameActive, timeLeft]);\n\n  function updateTimeLeft() {\n    if (game.turn() === 'w') {\n      setTimeLeft((prevState) => ({\n        ...prevState,\n        whiteTime: prevState.whiteTime - 1,\n      }));\n    } else {\n      setTimeLeft((prevState) => ({\n        ...prevState,\n        blackTime: prevState.blackTime - 1,\n      }));\n    }\n  }\n  useEffect(() => {\n    if (!gameMove) return;\n    const { whiteSan, blackSan, index } = gameMove;\n    if (whiteSan !== '' || blackSan !== '') {\n      updateMoves({\n        whiteSan,\n        blackSan,\n        index,\n        id: generateID(5),\n      });\n    }\n    if (whiteSan !== '' && blackSan !== '') {\n      setGameMove({\n        ...gameMove,\n        whiteSan: '',\n        blackSan: '',\n        id: null,\n      });\n    }\n  }, [gameMove]);\n  useEffect(() => {\n    songRef.current.play();\n\n    function makeEngineMove() {\n      const { bestMove, move } = minimaxRoot(game, maxDepth, true);\n\n      setGameMove((prevState) => ({\n        ...prevState,\n        blackSan: move?.san,\n      }));\n      game.move(bestMove);\n      board.position(game.fen());\n      updateStatus();\n    }\n\n    function onDragStart(square, piece) {\n      makeDots(game, square);\n\n      return (\n        !game.game_over() &&\n        game.turn() === 'w' &&\n        allowMove(game.turn(), piece)\n      );\n    }\n\n    function onDrop(source, target) {\n      removeDotSquares();\n\n      const move = game.move({\n        from: source,\n        to: target,\n        promotion: 'q',\n      });\n      if (move === null) {\n        return 'snapback';\n      }\n\n      window.setTimeout(makeEngineMove, 3200);\n\n      setGameMove((prevState) => ({\n        ...prevState,\n        whiteSan: move?.san,\n        index: prevState.index + 1,\n      }));\n      setTimeLeft((prevState) => ({\n        ...prevState,\n        isGameActive: true,\n      }));\n    }\n\n    function onSnapEnd() {\n      songRef.current.play();\n\n      board.position(game.fen());\n      updateStatus();\n    }\n\n    function onMouseoverSquare(square) {\n      makeDots(game, square);\n    }\n\n    const config = {\n      pieceTheme: `${process.env.PUBLIC_URL}/img/chesspieces/${piece}/{piece}.png`,\n      draggable: true,\n      position: 'start',\n      onDragStart,\n      onDrop,\n      onSnapEnd,\n      onMouseoutSquare: removeDotSquares,\n      onMouseoverSquare,\n    };\n\n    board = Chessboard('board', config);\n\n    $(window).resize(board.resize);\n\n    const $board = $('.chessboard-63f37');\n    const squares = $('.square-55d63');\n\n    if (boardType === 'wooden') {\n      $board.addClass('woodenBoard');\n      squares.addClass('transparent');\n    } else if (board === 'classic') {\n      $board.removeClass('woodenBoard');\n      squares.removeClass('transparent');\n    }\n    updateStatus();\n  }, []);\n\n  function updateStatus() {\n    const statusGame = statusText(\n      game.turn(),\n      1,\n      isMyTurn(1, game.turn()),\n      game.in_draw(),\n      game.in_check(),\n      game.in_checkmate(),\n      game.in_threefold_repetition(),\n      game.insufficient_material(),\n      game.in_stalemate()\n    );\n    updateStatusText(statusGame);\n  }\n\n  return (\n    <>\n      <div className=\"page__wrapper\">\n        {(game.game_over() || isGameEndByTime) && (\n          <EndGameCard timeLeft={timeLeft} turn={game.turn()} user={user} />\n        )}\n        <Game\n          timeLeft={timeLeft}\n          songRef={songRef}\n          links={false}\n          playerNum={1}\n          isGameEnded={game.game_over() || isGameEndByTime}\n          changeSite={history.push}\n          updateLocalStorage={updateLocalStorage}\n          userName={user?.userName}\n          points={user?.points}\n          turn={game.turn()}\n        />\n        <ScoreBoard moves={moves} statusText={currentStatusText} />\n      </div>\n    </>\n  );\n};\n\nfunction mapStateToProps(state) {\n  const { piece, board, moves, statusText } = state.boardInfo;\n  const { user } = state;\n  return {\n    piece,\n    boardType: board,\n    user,\n    moves,\n    currentStatusText: statusText,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateMoves: boardActions.updateMoves,\n  updateStatusText: boardActions.updateStatusText,\n  loginUserWithSocials: userActions.loginUserWithSocials,\n  loginUserWithForm: userActions.loginUserWithForm,\n  updateLocalStorage: userActions.updateLocalStorage,\n};\n\nComputerGamePage.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  boardType: PropTypes.string.isRequired,\n  piece: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    userName: PropTypes.string,\n    photo: PropTypes.string,\n    uid: PropTypes.string,\n    points: PropTypes.number,\n  }),\n  moves: PropTypes.arrayOf(\n    PropTypes.shape({\n      whiteSan: PropTypes.string,\n      blackSan: PropTypes.string,\n      index: PropTypes.number,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  currentStatusText: PropTypes.string.isRequired,\n  updateMoves: PropTypes.func.isRequired,\n  updateStatusText: PropTypes.func.isRequired,\n  loginUserWithSocials: PropTypes.func.isRequired,\n  loginUserWithForm: PropTypes.func.isRequired,\n  updateLocalStorage: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComputerGamePage);\n"],"sourceRoot":""}