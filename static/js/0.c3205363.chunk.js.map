{"version":3,"sources":["../node_modules/@chrisoakman/chessboardjs/dist/chessboard-1.0.0.js"],"names":["ChessBoard","$","window","COLUMNS","split","START_FEN","START_POSITION","fenToObj","CSS","throttle","f","interval","scope","timeout","shouldFire","args","handleTimeout","fire","setTimeout","apply","_args","arguments","uuid","replace","c","Math","random","toString","deepCopy","thing","JSON","parse","stringify","parseSemVer","version","tmp","major","parseInt","minor","patch","interpolateTemplate","str","obj","key","hasOwnProperty","keyTemplateStr","value","indexOf","isString","s","isFunction","isInteger","n","isFinite","floor","validAnimationSpeed","speed","validMove","move","squares","length","validSquare","square","search","validPieceCode","code","validFen","fen","chunks","expandFenEmptySquares","i","validPositionObject","pos","isPlainObject","validJQueryVersion","fn","jquery","minimum","pieceCodeToFen","piece","pieceCodeLetters","toUpperCase","toLowerCase","rows","position","currentRow","row","colIdx","j","objToFen","squeezeFenEmptySquares","squareDistance","squareA","squareB","squareAArray","squareAx","squareAy","squareBArray","squareBx","squareBy","xDelta","abs","yDelta","findClosestPiece","closestSquares","push","distance","sort","a","b","surroundingSquares","createRadius","calculatePositionFromMoves","moves","newPosition","expandConfig","config","rate","orientation","showNotation","draggable","dropOffBoard","sparePieces","pieceTheme","process","appearSpeed","moveSpeed","snapbackSpeed","snapSpeed","trashSpeed","dragThrottleRate","containerElOrString","alert","checkJQuery","$container","charAt","checkContainerArg","expandConfigArgumentShorthand","$board","$draggedPiece","$sparePiecesTop","$sparePiecesBottom","widget","boardBorderSize","currentOrientation","currentPosition","draggedPiece","draggedPieceLocation","draggedPieceSource","isDragging","sparePiecesElsIds","squareElsIds","squareElsOffsets","squareSize","error","msg","showErrors","errorText","console","log","buildPieceImgSrc","buildPieceHTML","hidden","id","html","buildSparePiecesHTML","color","pieces","animateSquareToSquare","src","dest","completeFn","$srcSquare","srcSquarePosition","offset","$destSquare","destSquarePosition","animatedPieceId","append","$animatedPiece","css","display","top","left","find","remove","opts","duration","complete","animate","animateSparePieceToSquare","srcOffset","destOffset","pieceId","doAnimations","animations","oldPos","newPos","numFinished","animation","type","fadeOut","onFinishAnimation3","source","destination","fadeIn","drawPositionInstant","onMoveEnd","calculateAnimations","pos1","pos2","squaresMovedTo","closestPiece","drawBoard","alpha","reverse","squareColor","buildBoardHTML","setCurrentPosition","onChange","isXYOnSquare","x","y","removeSquareHighlights","removeClass","highlight1","highlight2","trashDraggedPiece","beginDraggingPiece","onDragStart","captureSquareOffsets","attr","addClass","updateDraggedPiece","location","onDragMove","stopDraggedPiece","action","onDrop","oldPosition","result","sourceSquarePosition","onSnapbackEnd","snapbackDraggedPiece","targetSquarePosition","onSnapEnd","dropDraggedPieceOnSquare","stopDefault","evt","preventDefault","mousedownSquare","this","pageX","pageY","touchstartSquare","e","originalEvent","changedTouches","mousedownSparePiece","touchstartSparePiece","clear","useAnimation","destroy","unbind","flip","arg","resize","containerWidth","width","boardWidth","calculateSquareSize","height","start","throttledMousemoveWindow","throttledTouchmoveWindow","mouseupWindow","touchendWindow","mouseenterSquare","onMouseoverSquare","currentTarget","mouseleaveSquare","onMouseoutSquare","whitePiece","blackPiece","createElIds","hasSparePieces","buildContainerHTML","board","sparePiecesTop","sparePiecesBottom","draggedPieceId","initDOM","on","$window","document","documentElement","addEvents"],"mappings":"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","file":"static/js/0.c3205363.chunk.js","sourcesContent":["// chessboard.js v1.0.0\n// https://github.com/oakmac/chessboardjs/\n//\n// Copyright (c) 2019, Chris Oakman\n// Released under the MIT license\n// https://github.com/oakmac/chessboardjs/blob/master/LICENSE.md\n\n// start anonymous scope\n\nconst ChessBoard = function () {\n  'use strict'\n\n  var $ = window['jQuery']\n\n  // ---------------------------------------------------------------------------\n  // Constants\n  // ---------------------------------------------------------------------------\n\n  var COLUMNS = 'abcdefgh'.split('')\n  var DEFAULT_DRAG_THROTTLE_RATE = 20\n  var ELLIPSIS = '…'\n  var MINIMUM_JQUERY_VERSION = '1.8.3'\n  var RUN_ASSERTS = false\n  var START_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'\n  var START_POSITION = fenToObj(START_FEN)\n\n  // default animation speeds\n  var DEFAULT_APPEAR_SPEED = 200\n  var DEFAULT_MOVE_SPEED = 200\n  var DEFAULT_SNAPBACK_SPEED = 60\n  var DEFAULT_SNAP_SPEED = 30\n  var DEFAULT_TRASH_SPEED = 100\n\n  // use unique class names to prevent clashing with anything else on the page\n  // and simplify selectors\n  // NOTE: these should never change\n  var CSS = {}\n  CSS['alpha'] = 'alpha-d2270'\n  CSS['black'] = 'black-3c85d'\n  CSS['board'] = 'board-b72b1'\n  CSS['chessboard'] = 'chessboard-63f37'\n  CSS['clearfix'] = 'clearfix-7da63'\n  CSS['highlight1'] = 'highlight1-32417'\n  CSS['highlight2'] = 'highlight2-9c5d2'\n  CSS['notation'] = 'notation-322f9'\n  CSS['numeric'] = 'numeric-fc462'\n  CSS['piece'] = 'piece-417db'\n  CSS['row'] = 'row-5277c'\n  CSS['sparePieces'] = 'spare-pieces-7492f'\n  CSS['sparePiecesBottom'] = 'spare-pieces-bottom-ae20f'\n  CSS['sparePiecesTop'] = 'spare-pieces-top-4028b'\n  CSS['square'] = 'square-55d63'\n  CSS['white'] = 'white-1e1d7'\n\n  // ---------------------------------------------------------------------------\n  // Misc Util Functions\n  // ---------------------------------------------------------------------------\n\n  function throttle (f, interval, scope) {\n    var timeout = 0\n    var shouldFire = false\n    var args = []\n\n    var handleTimeout = function () {\n      timeout = 0\n      if (shouldFire) {\n        shouldFire = false\n        fire()\n      }\n    }\n\n    var fire = function () {\n      timeout = window.setTimeout(handleTimeout, interval)\n      f.apply(scope, args)\n    }\n\n    return function (_args) {\n      args = arguments\n      if (!timeout) {\n        fire()\n      } else {\n        shouldFire = true\n      }\n    }\n  }\n\n  // function debounce (f, interval, scope) {\n  //   var timeout = 0\n  //   return function (_args) {\n  //     window.clearTimeout(timeout)\n  //     var args = arguments\n  //     timeout = window.setTimeout(function () {\n  //       f.apply(scope, args)\n  //     }, interval)\n  //   }\n  // }\n\n  function uuid () {\n    return 'xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx-xxxx'.replace(/x/g, function (c) {\n      var r = (Math.random() * 16) | 0\n      return r.toString(16)\n    })\n  }\n\n  function deepCopy (thing) {\n    return JSON.parse(JSON.stringify(thing))\n  }\n\n  function parseSemVer (version) {\n    var tmp = version.split('.')\n    return {\n      major: parseInt(tmp[0], 10),\n      minor: parseInt(tmp[1], 10),\n      patch: parseInt(tmp[2], 10)\n    }\n  }\n\n  // returns true if version is >= minimum\n  function validSemanticVersion (version, minimum) {\n    version = parseSemVer(version)\n    minimum = parseSemVer(minimum)\n\n    var versionNum = (version.major * 100000 * 100000) +\n                     (version.minor * 100000) +\n                     version.patch\n    var minimumNum = (minimum.major * 100000 * 100000) +\n                     (minimum.minor * 100000) +\n                     minimum.patch\n\n    return versionNum >= minimumNum\n  }\n\n  function interpolateTemplate (str, obj) {\n    for (var key in obj) {\n      if (!obj.hasOwnProperty(key)) continue\n      var keyTemplateStr = '{' + key + '}'\n      var value = obj[key]\n      while (str.indexOf(keyTemplateStr) !== -1) {\n        str = str.replace(keyTemplateStr, value)\n      }\n    }\n    return str\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(interpolateTemplate('abc', {a: 'x'}) === 'abc')\n    console.assert(interpolateTemplate('{a}bc', {}) === '{a}bc')\n    console.assert(interpolateTemplate('{a}bc', {p: 'q'}) === '{a}bc')\n    console.assert(interpolateTemplate('{a}bc', {a: 'x'}) === 'xbc')\n    console.assert(interpolateTemplate('{a}bc{a}bc', {a: 'x'}) === 'xbcxbc')\n    console.assert(interpolateTemplate('{a}{a}{b}', {a: 'x', b: 'y'}) === 'xxy')\n  }\n\n  // ---------------------------------------------------------------------------\n  // Predicates\n  // ---------------------------------------------------------------------------\n\n  function isString (s) {\n    return typeof s === 'string'\n  }\n\n  function isFunction (f) {\n    return typeof f === 'function'\n  }\n\n  function isInteger (n) {\n    return typeof n === 'number' &&\n           isFinite(n) &&\n           Math.floor(n) === n\n  }\n\n  function validAnimationSpeed (speed) {\n    if (speed === 'fast' || speed === 'slow') return true\n    if (!isInteger(speed)) return false\n    return speed >= 0\n  }\n\n  function validThrottleRate (rate) {\n    return isInteger(rate) &&\n           rate >= 1\n  }\n\n  function validMove (move) {\n    // move should be a string\n    if (!isString(move)) return false\n\n    // move should be in the form of \"e2-e4\", \"f6-d5\"\n    var squares = move.split('-')\n    if (squares.length !== 2) return false\n\n    return validSquare(squares[0]) && validSquare(squares[1])\n  }\n\n  function validSquare (square) {\n    return isString(square) && square.search(/^[a-h][1-8]$/) !== -1\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validSquare('a1'))\n    console.assert(validSquare('e2'))\n    console.assert(!validSquare('D2'))\n    console.assert(!validSquare('g9'))\n    console.assert(!validSquare('a'))\n    console.assert(!validSquare(true))\n    console.assert(!validSquare(null))\n    console.assert(!validSquare({}))\n  }\n\n  function validPieceCode (code) {\n    return isString(code) && code.search(/^[bw][KQRNBP]$/) !== -1\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validPieceCode('bP'))\n    console.assert(validPieceCode('bK'))\n    console.assert(validPieceCode('wK'))\n    console.assert(validPieceCode('wR'))\n    console.assert(!validPieceCode('WR'))\n    console.assert(!validPieceCode('Wr'))\n    console.assert(!validPieceCode('a'))\n    console.assert(!validPieceCode(true))\n    console.assert(!validPieceCode(null))\n    console.assert(!validPieceCode({}))\n  }\n\n  function validFen (fen) {\n    if (!isString(fen)) return false\n\n    // cut off any move, castling, etc info from the end\n    // we're only interested in position information\n    fen = fen.replace(/ .+$/, '')\n\n    // expand the empty square numbers to just 1s\n    fen = expandFenEmptySquares(fen)\n\n    // FEN should be 8 sections separated by slashes\n    var chunks = fen.split('/')\n    if (chunks.length !== 8) return false\n\n    // check each section\n    for (var i = 0; i < 8; i++) {\n      if (chunks[i].length !== 8 ||\n          chunks[i].search(/[^kqrnbpKQRNBP1]/) !== -1) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validFen(START_FEN))\n    console.assert(validFen('8/8/8/8/8/8/8/8'))\n    console.assert(validFen('r1bqkbnr/pppp1ppp/2n5/1B2p3/4P3/5N2/PPPP1PPP/RNBQK2R'))\n    console.assert(validFen('3r3r/1p4pp/2nb1k2/pP3p2/8/PB2PN2/p4PPP/R4RK1 b - - 0 1'))\n    console.assert(!validFen('3r3z/1p4pp/2nb1k2/pP3p2/8/PB2PN2/p4PPP/R4RK1 b - - 0 1'))\n    console.assert(!validFen('anbqkbnr/8/8/8/8/8/PPPPPPPP/8'))\n    console.assert(!validFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/'))\n    console.assert(!validFen('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBN'))\n    console.assert(!validFen('888888/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'))\n    console.assert(!validFen('888888/pppppppp/74/8/8/8/PPPPPPPP/RNBQKBNR'))\n    console.assert(!validFen({}))\n  }\n\n  function validPositionObject (pos) {\n    if (!$.isPlainObject(pos)) return false\n\n    for (var i in pos) {\n      if (!pos.hasOwnProperty(i)) continue\n\n      if (!validSquare(i) || !validPieceCode(pos[i])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(validPositionObject(START_POSITION))\n    console.assert(validPositionObject({}))\n    console.assert(validPositionObject({e2: 'wP'}))\n    console.assert(validPositionObject({e2: 'wP', d2: 'wP'}))\n    console.assert(!validPositionObject({e2: 'BP'}))\n    console.assert(!validPositionObject({y2: 'wP'}))\n    console.assert(!validPositionObject(null))\n    console.assert(!validPositionObject('start'))\n    console.assert(!validPositionObject(START_FEN))\n  }\n\n  function isTouchDevice () {\n    return 'ontouchstart' in document.documentElement\n  }\n\n  function validJQueryVersion () {\n    return typeof window.$ &&\n           $.fn &&\n           $.fn.jquery &&\n           validSemanticVersion($.fn.jquery, MINIMUM_JQUERY_VERSION)\n  }\n\n  // ---------------------------------------------------------------------------\n  // Chess Util Functions\n  // ---------------------------------------------------------------------------\n\n  // convert FEN piece code to bP, wK, etc\n  function fenToPieceCode (piece) {\n    // black piece\n    if (piece.toLowerCase() === piece) {\n      return 'b' + piece.toUpperCase()\n    }\n\n    // white piece\n    return 'w' + piece.toUpperCase()\n  }\n\n  // convert bP, wK, etc code to FEN structure\n  function pieceCodeToFen (piece) {\n    var pieceCodeLetters = piece.split('')\n\n    // white piece\n    if (pieceCodeLetters[0] === 'w') {\n      return pieceCodeLetters[1].toUpperCase()\n    }\n\n    // black piece\n    return pieceCodeLetters[1].toLowerCase()\n  }\n\n  // convert FEN string to position object\n  // returns false if the FEN string is invalid\n  function fenToObj (fen) {\n    if (!validFen(fen)) return false\n\n    // cut off any move, castling, etc info from the end\n    // we're only interested in position information\n    fen = fen.replace(/ .+$/, '')\n\n    var rows = fen.split('/')\n    var position = {}\n\n    var currentRow = 8\n    for (var i = 0; i < 8; i++) {\n      var row = rows[i].split('')\n      var colIdx = 0\n\n      // loop through each character in the FEN section\n      for (var j = 0; j < row.length; j++) {\n        // number / empty squares\n        if (row[j].search(/[1-8]/) !== -1) {\n          var numEmptySquares = parseInt(row[j], 10)\n          colIdx = colIdx + numEmptySquares\n        } else {\n          // piece\n          var square = COLUMNS[colIdx] + currentRow\n          position[square] = fenToPieceCode(row[j])\n          colIdx = colIdx + 1\n        }\n      }\n\n      currentRow = currentRow - 1\n    }\n\n    return position\n  }\n\n  // position object to FEN string\n  // returns false if the obj is not a valid position object\n  function objToFen (obj) {\n    if (!validPositionObject(obj)) return false\n\n    var fen = ''\n\n    var currentRow = 8\n    for (var i = 0; i < 8; i++) {\n      for (var j = 0; j < 8; j++) {\n        var square = COLUMNS[j] + currentRow\n\n        // piece exists\n        if (obj.hasOwnProperty(square)) {\n          fen = fen + pieceCodeToFen(obj[square])\n        } else {\n          // empty space\n          fen = fen + '1'\n        }\n      }\n\n      if (i !== 7) {\n        fen = fen + '/'\n      }\n\n      currentRow = currentRow - 1\n    }\n\n    // squeeze the empty numbers together\n    fen = squeezeFenEmptySquares(fen)\n\n    return fen\n  }\n\n  if (RUN_ASSERTS) {\n    console.assert(objToFen(START_POSITION) === START_FEN)\n    console.assert(objToFen({}) === '8/8/8/8/8/8/8/8')\n    console.assert(objToFen({a2: 'wP', 'b2': 'bP'}) === '8/8/8/8/8/8/Pp6/8')\n  }\n\n  function squeezeFenEmptySquares (fen) {\n    return fen.replace(/11111111/g, '8')\n      .replace(/1111111/g, '7')\n      .replace(/111111/g, '6')\n      .replace(/11111/g, '5')\n      .replace(/1111/g, '4')\n      .replace(/111/g, '3')\n      .replace(/11/g, '2')\n  }\n\n  function expandFenEmptySquares (fen) {\n    return fen.replace(/8/g, '11111111')\n      .replace(/7/g, '1111111')\n      .replace(/6/g, '111111')\n      .replace(/5/g, '11111')\n      .replace(/4/g, '1111')\n      .replace(/3/g, '111')\n      .replace(/2/g, '11')\n  }\n\n  // returns the distance between two squares\n  function squareDistance (squareA, squareB) {\n    var squareAArray = squareA.split('')\n    var squareAx = COLUMNS.indexOf(squareAArray[0]) + 1\n    var squareAy = parseInt(squareAArray[1], 10)\n\n    var squareBArray = squareB.split('')\n    var squareBx = COLUMNS.indexOf(squareBArray[0]) + 1\n    var squareBy = parseInt(squareBArray[1], 10)\n\n    var xDelta = Math.abs(squareAx - squareBx)\n    var yDelta = Math.abs(squareAy - squareBy)\n\n    if (xDelta >= yDelta) return xDelta\n    return yDelta\n  }\n\n  // returns the square of the closest instance of piece\n  // returns false if no instance of piece is found in position\n  function findClosestPiece (position, piece, square) {\n    // create array of closest squares from square\n    var closestSquares = createRadius(square)\n\n    // search through the position in order of distance for the piece\n    for (var i = 0; i < closestSquares.length; i++) {\n      var s = closestSquares[i]\n\n      if (position.hasOwnProperty(s) && position[s] === piece) {\n        return s\n      }\n    }\n\n    return false\n  }\n\n  // returns an array of closest squares from square\n  function createRadius (square) {\n    var squares = []\n\n    // calculate distance of all squares\n    for (var i = 0; i < 8; i++) {\n      for (var j = 0; j < 8; j++) {\n        var s = COLUMNS[i] + (j + 1)\n\n        // skip the square we're starting from\n        if (square === s) continue\n\n        squares.push({\n          square: s,\n          distance: squareDistance(square, s)\n        })\n      }\n    }\n\n    // sort by distance\n    squares.sort(function (a, b) {\n      return a.distance - b.distance\n    })\n\n    // just return the square code\n    var surroundingSquares = []\n    for (i = 0; i < squares.length; i++) {\n      surroundingSquares.push(squares[i].square)\n    }\n\n    return surroundingSquares\n  }\n\n  // given a position and a set of moves, return a new position\n  // with the moves executed\n  function calculatePositionFromMoves (position, moves) {\n    var newPosition = deepCopy(position)\n\n    for (var i in moves) {\n      if (!moves.hasOwnProperty(i)) continue\n\n      // skip the move if the position doesn't have a piece on the source square\n      if (!newPosition.hasOwnProperty(i)) continue\n\n      var piece = newPosition[i]\n      delete newPosition[i]\n      newPosition[moves[i]] = piece\n    }\n\n    return newPosition\n  }\n\n  // TODO: add some asserts here for calculatePositionFromMoves\n\n  // ---------------------------------------------------------------------------\n  // HTML\n  // ---------------------------------------------------------------------------\n\n  function buildContainerHTML (hasSparePieces) {\n    var html = '<div class=\"{chessboard}\">'\n\n    if (hasSparePieces) {\n      html += '<div class=\"{sparePieces} {sparePiecesTop}\"></div>'\n    }\n\n    html += '<div class=\"{board}\"></div>'\n\n    if (hasSparePieces) {\n      html += '<div class=\"{sparePieces} {sparePiecesBottom}\"></div>'\n    }\n\n    html += '</div>'\n\n    return interpolateTemplate(html, CSS)\n  }\n\n  // ---------------------------------------------------------------------------\n  // Config\n  // ---------------------------------------------------------------------------\n\n  function expandConfigArgumentShorthand (config) {\n    if (config === 'start') {\n      config = {position: deepCopy(START_POSITION)}\n    } else if (validFen(config)) {\n      config = {position: fenToObj(config)}\n    } else if (validPositionObject(config)) {\n      config = {position: deepCopy(config)}\n    }\n\n    // config must be an object\n    if (!$.isPlainObject(config)) config = {}\n\n    return config\n  }\n\n  // validate config / set default options\n  function expandConfig (config) {\n    // default for orientation is white\n    if (config.orientation !== 'black') config.orientation = 'white'\n\n    // default for showNotation is true\n    if (config.showNotation !== false) config.showNotation = true\n\n    // default for draggable is false\n    if (config.draggable !== true) config.draggable = false\n\n    // default for dropOffBoard is 'snapback'\n    if (config.dropOffBoard !== 'trash') config.dropOffBoard = 'snapback'\n\n    // default for sparePieces is false\n    if (config.sparePieces !== true) config.sparePieces = false\n\n    // draggable must be true if sparePieces is enabled\n    if (config.sparePieces) config.draggable = true\n\n    // default piece theme is wikipedia\n    if (!config.hasOwnProperty('pieceTheme') ||\n        (!isString(config.pieceTheme) && !isFunction(config.pieceTheme))) {\n      config.pieceTheme = `${process.env.PUBLIC_URL}/img/chesspieces/wikipedia/{piece}.png`\n      // config.pieceTheme = 'img/chesspieces/wikipedia/{piece}.png'\n    }\n\n    // animation speeds\n    if (!validAnimationSpeed(config.appearSpeed)) config.appearSpeed = DEFAULT_APPEAR_SPEED\n    if (!validAnimationSpeed(config.moveSpeed)) config.moveSpeed = DEFAULT_MOVE_SPEED\n    if (!validAnimationSpeed(config.snapbackSpeed)) config.snapbackSpeed = DEFAULT_SNAPBACK_SPEED\n    if (!validAnimationSpeed(config.snapSpeed)) config.snapSpeed = DEFAULT_SNAP_SPEED\n    if (!validAnimationSpeed(config.trashSpeed)) config.trashSpeed = DEFAULT_TRASH_SPEED\n\n    // throttle rate\n    if (!validThrottleRate(config.dragThrottleRate)) config.dragThrottleRate = DEFAULT_DRAG_THROTTLE_RATE\n\n    return config\n  }\n\n  // ---------------------------------------------------------------------------\n  // Dependencies\n  // ---------------------------------------------------------------------------\n\n  // check for a compatible version of jQuery\n  function checkJQuery () {\n    if (!validJQueryVersion()) {\n      var errorMsg = 'Chessboard Error 1005: Unable to find a valid version of jQuery. ' +\n        'Please include jQuery ' + MINIMUM_JQUERY_VERSION + ' or higher on the page' +\n        '\\n\\n' +\n        'Exiting' + ELLIPSIS\n      window.alert(errorMsg)\n      return false\n    }\n\n    return true\n  }\n\n  // return either boolean false or the $container element\n  function checkContainerArg (containerElOrString) {\n    if (containerElOrString === '') {\n      var errorMsg1 = 'Chessboard Error 1001: ' +\n        'The first argument to Chessboard() cannot be an empty string.' +\n        '\\n\\n' +\n        'Exiting' + ELLIPSIS\n      window.alert(errorMsg1)\n      return false\n    }\n\n    // convert containerEl to query selector if it is a string\n    if (isString(containerElOrString) &&\n        containerElOrString.charAt(0) !== '#') {\n      containerElOrString = '#' + containerElOrString\n    }\n\n    // containerEl must be something that becomes a jQuery collection of size 1\n    var $container = $(containerElOrString)\n    if ($container.length !== 1) {\n      var errorMsg2 = 'Chessboard Error 1003: ' +\n        'The first argument to Chessboard() must be the ID of a DOM node, ' +\n        'an ID query selector, or a single DOM node.' +\n        '\\n\\n' +\n        'Exiting' + ELLIPSIS\n      window.alert(errorMsg2)\n      return false\n    }\n\n    return $container\n  }\n\n  // ---------------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------------\n\n  function constructor (containerElOrString, config) {\n    // first things first: check basic dependencies\n    if (!checkJQuery()) return null\n    var $container = checkContainerArg(containerElOrString)\n    if (!$container) return null\n\n    // ensure the config object is what we expect\n    config = expandConfigArgumentShorthand(config)\n    config = expandConfig(config)\n\n    // DOM elements\n    var $board = null\n    var $draggedPiece = null\n    var $sparePiecesTop = null\n    var $sparePiecesBottom = null\n\n    // constructor return object\n    var widget = {}\n\n    // -------------------------------------------------------------------------\n    // Stateful\n    // -------------------------------------------------------------------------\n\n    var boardBorderSize = 2\n    var currentOrientation = 'white'\n    var currentPosition = {}\n    var draggedPiece = null\n    var draggedPieceLocation = null\n    var draggedPieceSource = null\n    var isDragging = false\n    var sparePiecesElsIds = {}\n    var squareElsIds = {}\n    var squareElsOffsets = {}\n    var squareSize = 16\n\n    // -------------------------------------------------------------------------\n    // Validation / Errors\n    // -------------------------------------------------------------------------\n\n    function error (code, msg, obj) {\n      // do nothing if showErrors is not set\n      if (\n        config.hasOwnProperty('showErrors') !== true ||\n          config.showErrors === false\n      ) {\n        return\n      }\n\n      var errorText = 'Chessboard Error ' + code + ': ' + msg\n\n      // print to console\n      if (\n        config.showErrors === 'console' &&\n          typeof console === 'object' &&\n          typeof console.log === 'function'\n      ) {\n        console.log(errorText)\n        if (arguments.length >= 2) {\n          console.log(obj)\n        }\n        return\n      }\n\n      // alert errors\n      if (config.showErrors === 'alert') {\n        if (obj) {\n          errorText += '\\n\\n' + JSON.stringify(obj)\n        }\n        window.alert(errorText)\n        return\n      }\n\n      // custom function\n      if (isFunction(config.showErrors)) {\n        config.showErrors(code, msg, obj)\n      }\n    }\n\n    function setInitialState () {\n      currentOrientation = config.orientation\n\n      // make sure position is valid\n      if (config.hasOwnProperty('position')) {\n        if (config.position === 'start') {\n          currentPosition = deepCopy(START_POSITION)\n        } else if (validFen(config.position)) {\n          currentPosition = fenToObj(config.position)\n        } else if (validPositionObject(config.position)) {\n          currentPosition = deepCopy(config.position)\n        } else {\n          error(\n            7263,\n            'Invalid value passed to config.position.',\n            config.position\n          )\n        }\n      }\n    }\n\n    // -------------------------------------------------------------------------\n    // DOM Misc\n    // -------------------------------------------------------------------------\n\n    // calculates square size based on the width of the container\n    // got a little CSS black magic here, so let me explain:\n    // get the width of the container element (could be anything), reduce by 1 for\n    // fudge factor, and then keep reducing until we find an exact mod 8 for\n    // our square size\n    function calculateSquareSize () {\n      var containerWidth = parseInt($container.width(), 10)\n\n      // defensive, prevent infinite loop\n      if (!containerWidth || containerWidth <= 0) {\n        return 0\n      }\n\n      // pad one pixel\n      var boardWidth = containerWidth - 1\n\n      while (boardWidth % 8 !== 0 && boardWidth > 0) {\n        boardWidth = boardWidth - 1\n      }\n\n      return boardWidth / 8\n    }\n\n    // create random IDs for elements\n    function createElIds () {\n      // squares on the board\n      for (var i = 0; i < COLUMNS.length; i++) {\n        for (var j = 1; j <= 8; j++) {\n          var square = COLUMNS[i] + j\n          squareElsIds[square] = square + '-' + uuid()\n        }\n      }\n\n      // spare pieces\n      var pieces = 'KQRNBP'.split('')\n      for (i = 0; i < pieces.length; i++) {\n        var whitePiece = 'w' + pieces[i]\n        var blackPiece = 'b' + pieces[i]\n        sparePiecesElsIds[whitePiece] = whitePiece + '-' + uuid()\n        sparePiecesElsIds[blackPiece] = blackPiece + '-' + uuid()\n      }\n    }\n\n    // -------------------------------------------------------------------------\n    // Markup Building\n    // -------------------------------------------------------------------------\n\n    function buildBoardHTML (orientation) {\n      if (orientation !== 'black') {\n        orientation = 'white'\n      }\n\n      var html = ''\n\n      // algebraic notation / orientation\n      var alpha = deepCopy(COLUMNS)\n      var row = 8\n      if (orientation === 'black') {\n        alpha.reverse()\n        row = 1\n      }\n\n      var squareColor = 'white'\n      for (var i = 0; i < 8; i++) {\n        html += '<div class=\"{row}\">'\n        for (var j = 0; j < 8; j++) {\n          var square = alpha[j] + row\n\n          html += '<div class=\"{square} ' + CSS[squareColor] + ' ' +\n            'square-' + square + '\" ' +\n            'style=\"width:' + squareSize + 'px;height:' + squareSize + 'px;\" ' +\n            'id=\"' + squareElsIds[square] + '\" ' +\n            'data-square=\"' + square + '\">'\n\n          if (config.showNotation) {\n            // alpha notation\n            if ((orientation === 'white' && row === 1) ||\n                (orientation === 'black' && row === 8)) {\n              html += '<div class=\"{notation} {alpha}\">' + alpha[j] + '</div>'\n            }\n\n            // numeric notation\n            if (j === 0) {\n              html += '<div class=\"{notation} {numeric}\">' + row + '</div>'\n            }\n          }\n\n          html += '</div>' // end .square\n\n          squareColor = (squareColor === 'white') ? 'black' : 'white'\n        }\n        html += '<div class=\"{clearfix}\"></div></div>'\n\n        squareColor = (squareColor === 'white') ? 'black' : 'white'\n\n        if (orientation === 'white') {\n          row = row - 1\n        } else {\n          row = row + 1\n        }\n      }\n\n      return interpolateTemplate(html, CSS)\n    }\n\n    function buildPieceImgSrc (piece) {\n      if (isFunction(config.pieceTheme)) {\n        return config.pieceTheme(piece)\n      }\n\n      if (isString(config.pieceTheme)) {\n        return interpolateTemplate(config.pieceTheme, {piece: piece})\n      }\n\n      // NOTE: this should never happen\n      error(8272, 'Unable to build image source for config.pieceTheme.')\n      return ''\n    }\n\n    function buildPieceHTML (piece, hidden, id) {\n      var html = '<img src=\"' + buildPieceImgSrc(piece) + '\" '\n      if (isString(id) && id !== '') {\n        html += 'id=\"' + id + '\" '\n      }\n      html += 'alt=\"\" ' +\n        'class=\"{piece}\" ' +\n        'data-piece=\"' + piece + '\" ' +\n        'style=\"width:' + squareSize + 'px;' + 'height:' + squareSize + 'px;'\n\n      if (hidden) {\n        html += 'display:none;'\n      }\n\n      html += '\" />'\n\n      return interpolateTemplate(html, CSS)\n    }\n\n    function buildSparePiecesHTML (color) {\n      var pieces = ['wK', 'wQ', 'wR', 'wB', 'wN', 'wP']\n      if (color === 'black') {\n        pieces = ['bK', 'bQ', 'bR', 'bB', 'bN', 'bP']\n      }\n\n      var html = ''\n      for (var i = 0; i < pieces.length; i++) {\n        html += buildPieceHTML(pieces[i], false, sparePiecesElsIds[pieces[i]])\n      }\n\n      return html\n    }\n\n    // -------------------------------------------------------------------------\n    // Animations\n    // -------------------------------------------------------------------------\n\n    function animateSquareToSquare (src, dest, piece, completeFn) {\n      // get information about the source and destination squares\n      var $srcSquare = $('#' + squareElsIds[src])\n      var srcSquarePosition = $srcSquare.offset()\n      var $destSquare = $('#' + squareElsIds[dest])\n      var destSquarePosition = $destSquare.offset()\n\n      // create the animated piece and absolutely position it\n      // over the source square\n      var animatedPieceId = uuid()\n      $('body').append(buildPieceHTML(piece, true, animatedPieceId))\n      var $animatedPiece = $('#' + animatedPieceId)\n      $animatedPiece.css({\n        display: '',\n        position: 'absolute',\n        top: srcSquarePosition.top,\n        left: srcSquarePosition.left\n      })\n\n      // remove original piece from source square\n      $srcSquare.find('.' + CSS.piece).remove()\n\n      function onFinishAnimation1 () {\n        // add the \"real\" piece to the destination square\n        $destSquare.append(buildPieceHTML(piece))\n\n        // remove the animated piece\n        $animatedPiece.remove()\n\n        // run complete function\n        if (isFunction(completeFn)) {\n          completeFn()\n        }\n      }\n\n      // animate the piece to the destination square\n      var opts = {\n        duration: config.moveSpeed,\n        complete: onFinishAnimation1\n      }\n      $animatedPiece.animate(destSquarePosition, opts)\n    }\n\n    function animateSparePieceToSquare (piece, dest, completeFn) {\n      var srcOffset = $('#' + sparePiecesElsIds[piece]).offset()\n      var $destSquare = $('#' + squareElsIds[dest])\n      var destOffset = $destSquare.offset()\n\n      // create the animate piece\n      var pieceId = uuid()\n      $('body').append(buildPieceHTML(piece, true, pieceId))\n      var $animatedPiece = $('#' + pieceId)\n      $animatedPiece.css({\n        display: '',\n        position: 'absolute',\n        left: srcOffset.left,\n        top: srcOffset.top\n      })\n\n      // on complete\n      function onFinishAnimation2 () {\n        // add the \"real\" piece to the destination square\n        $destSquare.find('.' + CSS.piece).remove()\n        $destSquare.append(buildPieceHTML(piece))\n\n        // remove the animated piece\n        $animatedPiece.remove()\n\n        // run complete function\n        if (isFunction(completeFn)) {\n          completeFn()\n        }\n      }\n\n      // animate the piece to the destination square\n      var opts = {\n        duration: config.moveSpeed,\n        complete: onFinishAnimation2\n      }\n      $animatedPiece.animate(destOffset, opts)\n    }\n\n    // execute an array of animations\n    function doAnimations (animations, oldPos, newPos) {\n      if (animations.length === 0) return\n\n      var numFinished = 0\n      function onFinishAnimation3 () {\n        // exit if all the animations aren't finished\n        numFinished = numFinished + 1\n        if (numFinished !== animations.length) return\n\n        drawPositionInstant()\n\n        // run their onMoveEnd function\n        if (isFunction(config.onMoveEnd)) {\n          config.onMoveEnd(deepCopy(oldPos), deepCopy(newPos))\n        }\n      }\n\n      for (var i = 0; i < animations.length; i++) {\n        var animation = animations[i]\n\n        // clear a piece\n        if (animation.type === 'clear') {\n          $('#' + squareElsIds[animation.square] + ' .' + CSS.piece)\n            .fadeOut(config.trashSpeed, onFinishAnimation3)\n\n        // add a piece with no spare pieces - fade the piece onto the square\n        } else if (animation.type === 'add' && !config.sparePieces) {\n          $('#' + squareElsIds[animation.square])\n            .append(buildPieceHTML(animation.piece, true))\n            .find('.' + CSS.piece)\n            .fadeIn(config.appearSpeed, onFinishAnimation3)\n\n        // add a piece with spare pieces - animate from the spares\n        } else if (animation.type === 'add' && config.sparePieces) {\n          animateSparePieceToSquare(animation.piece, animation.square, onFinishAnimation3)\n\n        // move a piece from squareA to squareB\n        } else if (animation.type === 'move') {\n          animateSquareToSquare(animation.source, animation.destination, animation.piece, onFinishAnimation3)\n        }\n      }\n    }\n\n    // calculate an array of animations that need to happen in order to get\n    // from pos1 to pos2\n    function calculateAnimations (pos1, pos2) {\n      // make copies of both\n      pos1 = deepCopy(pos1)\n      pos2 = deepCopy(pos2)\n\n      var animations = []\n      var squaresMovedTo = {}\n\n      // remove pieces that are the same in both positions\n      for (var i in pos2) {\n        if (!pos2.hasOwnProperty(i)) continue\n\n        if (pos1.hasOwnProperty(i) && pos1[i] === pos2[i]) {\n          delete pos1[i]\n          delete pos2[i]\n        }\n      }\n\n      // find all the \"move\" animations\n      for (i in pos2) {\n        if (!pos2.hasOwnProperty(i)) continue\n\n        var closestPiece = findClosestPiece(pos1, pos2[i], i)\n        if (closestPiece) {\n          animations.push({\n            type: 'move',\n            source: closestPiece,\n            destination: i,\n            piece: pos2[i]\n          })\n\n          delete pos1[closestPiece]\n          delete pos2[i]\n          squaresMovedTo[i] = true\n        }\n      }\n\n      // \"add\" animations\n      for (i in pos2) {\n        if (!pos2.hasOwnProperty(i)) continue\n\n        animations.push({\n          type: 'add',\n          square: i,\n          piece: pos2[i]\n        })\n\n        delete pos2[i]\n      }\n\n      // \"clear\" animations\n      for (i in pos1) {\n        if (!pos1.hasOwnProperty(i)) continue\n\n        // do not clear a piece if it is on a square that is the result\n        // of a \"move\", ie: a piece capture\n        if (squaresMovedTo.hasOwnProperty(i)) continue\n\n        animations.push({\n          type: 'clear',\n          square: i,\n          piece: pos1[i]\n        })\n\n        delete pos1[i]\n      }\n\n      return animations\n    }\n\n    // -------------------------------------------------------------------------\n    // Control Flow\n    // -------------------------------------------------------------------------\n\n    function drawPositionInstant () {\n      // clear the board\n      $board.find('.' + CSS.piece).remove()\n\n      // add the pieces\n      for (var i in currentPosition) {\n        if (!currentPosition.hasOwnProperty(i)) continue\n\n        $('#' + squareElsIds[i]).append(buildPieceHTML(currentPosition[i]))\n      }\n    }\n\n    function drawBoard () {\n      $board.html(buildBoardHTML(currentOrientation, squareSize, config.showNotation))\n      drawPositionInstant()\n\n      if (config.sparePieces) {\n        if (currentOrientation === 'white') {\n          $sparePiecesTop.html(buildSparePiecesHTML('black'))\n          $sparePiecesBottom.html(buildSparePiecesHTML('white'))\n        } else {\n          $sparePiecesTop.html(buildSparePiecesHTML('white'))\n          $sparePiecesBottom.html(buildSparePiecesHTML('black'))\n        }\n      }\n    }\n\n    function setCurrentPosition (position) {\n      var oldPos = deepCopy(currentPosition)\n      var newPos = deepCopy(position)\n      var oldFen = objToFen(oldPos)\n      var newFen = objToFen(newPos)\n\n      // do nothing if no change in position\n      if (oldFen === newFen) return\n\n      // run their onChange function\n      if (isFunction(config.onChange)) {\n        config.onChange(oldPos, newPos)\n      }\n\n      // update state\n      currentPosition = position\n    }\n\n    function isXYOnSquare (x, y) {\n      for (var i in squareElsOffsets) {\n        if (!squareElsOffsets.hasOwnProperty(i)) continue\n\n        var s = squareElsOffsets[i]\n        if (x >= s.left &&\n            x < s.left + squareSize &&\n            y >= s.top &&\n            y < s.top + squareSize) {\n          return i\n        }\n      }\n\n      return 'offboard'\n    }\n\n    // records the XY coords of every square into memory\n    function captureSquareOffsets () {\n      squareElsOffsets = {}\n\n      for (var i in squareElsIds) {\n        if (!squareElsIds.hasOwnProperty(i)) continue\n\n        squareElsOffsets[i] = $('#' + squareElsIds[i]).offset()\n      }\n    }\n\n    function removeSquareHighlights () {\n      $board\n        .find('.' + CSS.square)\n        .removeClass(CSS.highlight1 + ' ' + CSS.highlight2)\n    }\n\n    function snapbackDraggedPiece () {\n      // there is no \"snapback\" for spare pieces\n      if (draggedPieceSource === 'spare') {\n        trashDraggedPiece()\n        return\n      }\n\n      removeSquareHighlights()\n\n      // animation complete\n      function complete () {\n        drawPositionInstant()\n        $draggedPiece.css('display', 'none')\n\n        // run their onSnapbackEnd function\n        if (isFunction(config.onSnapbackEnd)) {\n          config.onSnapbackEnd(\n            draggedPiece,\n            draggedPieceSource,\n            deepCopy(currentPosition),\n            currentOrientation\n          )\n        }\n      }\n\n      // get source square position\n      var sourceSquarePosition = $('#' + squareElsIds[draggedPieceSource]).offset()\n\n      // animate the piece to the target square\n      var opts = {\n        duration: config.snapbackSpeed,\n        complete: complete\n      }\n      $draggedPiece.animate(sourceSquarePosition, opts)\n\n      // set state\n      isDragging = false\n    }\n\n    function trashDraggedPiece () {\n      removeSquareHighlights()\n\n      // remove the source piece\n      var newPosition = deepCopy(currentPosition)\n      delete newPosition[draggedPieceSource]\n      setCurrentPosition(newPosition)\n\n      // redraw the position\n      drawPositionInstant()\n\n      // hide the dragged piece\n      $draggedPiece.fadeOut(config.trashSpeed)\n\n      // set state\n      isDragging = false\n    }\n\n    function dropDraggedPieceOnSquare (square) {\n      removeSquareHighlights()\n\n      // update position\n      var newPosition = deepCopy(currentPosition)\n      delete newPosition[draggedPieceSource]\n      newPosition[square] = draggedPiece\n      setCurrentPosition(newPosition)\n\n      // get target square information\n      var targetSquarePosition = $('#' + squareElsIds[square]).offset()\n\n      // animation complete\n      function onAnimationComplete () {\n        drawPositionInstant()\n        $draggedPiece.css('display', 'none')\n\n        // execute their onSnapEnd function\n        if (isFunction(config.onSnapEnd)) {\n          config.onSnapEnd(draggedPieceSource, square, draggedPiece)\n        }\n      }\n\n      // snap the piece to the target square\n      var opts = {\n        duration: config.snapSpeed,\n        complete: onAnimationComplete\n      }\n      $draggedPiece.animate(targetSquarePosition, opts)\n\n      // set state\n      isDragging = false\n    }\n\n    function beginDraggingPiece (source, piece, x, y) {\n      // run their custom onDragStart function\n      // their custom onDragStart function can cancel drag start\n      if (isFunction(config.onDragStart) &&\n          config.onDragStart(source, piece, deepCopy(currentPosition), currentOrientation) === false) {\n        return\n      }\n\n      // set state\n      isDragging = true\n      draggedPiece = piece\n      draggedPieceSource = source\n\n      // if the piece came from spare pieces, location is offboard\n      if (source === 'spare') {\n        draggedPieceLocation = 'offboard'\n      } else {\n        draggedPieceLocation = source\n      }\n\n      // capture the x, y coords of all squares in memory\n      captureSquareOffsets()\n\n      // create the dragged piece\n      $draggedPiece.attr('src', buildPieceImgSrc(piece)).css({\n        display: '',\n        position: 'absolute',\n        left: x - squareSize / 2,\n        top: y - squareSize / 2\n      })\n\n      if (source !== 'spare') {\n        // highlight the source square and hide the piece\n        $('#' + squareElsIds[source])\n          .addClass(CSS.highlight1)\n          .find('.' + CSS.piece)\n          .css('display', 'none')\n      }\n    }\n\n    function updateDraggedPiece (x, y) {\n      // put the dragged piece over the mouse cursor\n      $draggedPiece.css({\n        left: x - squareSize / 2,\n        top: y - squareSize / 2\n      })\n\n      // get location\n      var location = isXYOnSquare(x, y)\n\n      // do nothing if the location has not changed\n      if (location === draggedPieceLocation) return\n\n      // remove highlight from previous square\n      if (validSquare(draggedPieceLocation)) {\n        $('#' + squareElsIds[draggedPieceLocation]).removeClass(CSS.highlight2)\n      }\n\n      // add highlight to new square\n      if (validSquare(location)) {\n        $('#' + squareElsIds[location]).addClass(CSS.highlight2)\n      }\n\n      // run onDragMove\n      if (isFunction(config.onDragMove)) {\n        config.onDragMove(\n          location,\n          draggedPieceLocation,\n          draggedPieceSource,\n          draggedPiece,\n          deepCopy(currentPosition),\n          currentOrientation\n        )\n      }\n\n      // update state\n      draggedPieceLocation = location\n    }\n\n    function stopDraggedPiece (location) {\n      // determine what the action should be\n      var action = 'drop'\n      if (location === 'offboard' && config.dropOffBoard === 'snapback') {\n        action = 'snapback'\n      }\n      if (location === 'offboard' && config.dropOffBoard === 'trash') {\n        action = 'trash'\n      }\n\n      // run their onDrop function, which can potentially change the drop action\n      if (isFunction(config.onDrop)) {\n        var newPosition = deepCopy(currentPosition)\n\n        // source piece is a spare piece and position is off the board\n        // if (draggedPieceSource === 'spare' && location === 'offboard') {...}\n        // position has not changed; do nothing\n\n        // source piece is a spare piece and position is on the board\n        if (draggedPieceSource === 'spare' && validSquare(location)) {\n          // add the piece to the board\n          newPosition[location] = draggedPiece\n        }\n\n        // source piece was on the board and position is off the board\n        if (validSquare(draggedPieceSource) && location === 'offboard') {\n          // remove the piece from the board\n          delete newPosition[draggedPieceSource]\n        }\n\n        // source piece was on the board and position is on the board\n        if (validSquare(draggedPieceSource) && validSquare(location)) {\n          // move the piece\n          delete newPosition[draggedPieceSource]\n          newPosition[location] = draggedPiece\n        }\n\n        var oldPosition = deepCopy(currentPosition)\n\n        var result = config.onDrop(\n          draggedPieceSource,\n          location,\n          draggedPiece,\n          newPosition,\n          oldPosition,\n          currentOrientation\n        )\n        if (result === 'snapback' || result === 'trash') {\n          action = result\n        }\n      }\n\n      // do it!\n      if (action === 'snapback') {\n        snapbackDraggedPiece()\n      } else if (action === 'trash') {\n        trashDraggedPiece()\n      } else if (action === 'drop') {\n        dropDraggedPieceOnSquare(location)\n      }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    // clear the board\n    widget.clear = function (useAnimation) {\n      widget.position({}, useAnimation)\n    }\n\n    // remove the widget from the page\n    widget.destroy = function () {\n      // remove markup\n      $container.html('')\n      $draggedPiece.remove()\n\n      // remove event handlers\n      $container.unbind()\n    }\n\n    // shorthand method to get the current FEN\n    widget.fen = function () {\n      return widget.position('fen')\n    }\n\n    // flip orientation\n    widget.flip = function () {\n      return widget.orientation('flip')\n    }\n\n    // move pieces\n    // TODO: this method should be variadic as well as accept an array of moves\n    widget.move = function () {\n      // no need to throw an error here; just do nothing\n      // TODO: this should return the current position\n      if (arguments.length === 0) return\n\n      var useAnimation = true\n\n      // collect the moves into an object\n      var moves = {}\n      for (var i = 0; i < arguments.length; i++) {\n        // any \"false\" to this function means no animations\n        if (arguments[i] === false) {\n          useAnimation = false\n          continue\n        }\n\n        // skip invalid arguments\n        if (!validMove(arguments[i])) {\n          error(2826, 'Invalid move passed to the move method.', arguments[i])\n          continue\n        }\n\n        var tmp = arguments[i].split('-')\n        moves[tmp[0]] = tmp[1]\n      }\n\n      // calculate position from moves\n      var newPos = calculatePositionFromMoves(currentPosition, moves)\n\n      // update the board\n      widget.position(newPos, useAnimation)\n\n      // return the new position object\n      return newPos\n    }\n\n    widget.orientation = function (arg) {\n      // no arguments, return the current orientation\n      if (arguments.length === 0) {\n        return currentOrientation\n      }\n\n      // set to white or black\n      if (arg === 'white' || arg === 'black') {\n        currentOrientation = arg\n        drawBoard()\n        return currentOrientation\n      }\n\n      // flip orientation\n      if (arg === 'flip') {\n        currentOrientation = currentOrientation === 'white' ? 'black' : 'white'\n        drawBoard()\n        return currentOrientation\n      }\n\n      error(5482, 'Invalid value passed to the orientation method.', arg)\n    }\n\n    widget.position = function (position, useAnimation) {\n      // no arguments, return the current position\n      if (arguments.length === 0) {\n        return deepCopy(currentPosition)\n      }\n\n      // get position as FEN\n      if (isString(position) && position.toLowerCase() === 'fen') {\n        return objToFen(currentPosition)\n      }\n\n      // start position\n      if (isString(position) && position.toLowerCase() === 'start') {\n        position = deepCopy(START_POSITION)\n      }\n\n      // convert FEN to position object\n      if (validFen(position)) {\n        position = fenToObj(position)\n      }\n\n      // validate position object\n      if (!validPositionObject(position)) {\n        error(6482, 'Invalid value passed to the position method.', position)\n        return\n      }\n\n      // default for useAnimations is true\n      if (useAnimation !== false) useAnimation = true\n\n      if (useAnimation) {\n        // start the animations\n        var animations = calculateAnimations(currentPosition, position)\n        doAnimations(animations, currentPosition, position)\n\n        // set the new position\n        setCurrentPosition(position)\n      } else {\n        // instant update\n        setCurrentPosition(position)\n        drawPositionInstant()\n      }\n    }\n\n    widget.resize = function () {\n      // calulate the new square size\n      squareSize = calculateSquareSize()\n\n      // set board width\n      $board.css('width', squareSize * 8 + 'px')\n\n      // set drag piece size\n      $draggedPiece.css({\n        height: squareSize,\n        width: squareSize\n      })\n\n      // spare pieces\n      if (config.sparePieces) {\n        $container\n          .find('.' + CSS.sparePieces)\n          .css('paddingLeft', squareSize + boardBorderSize + 'px')\n      }\n\n      // redraw the board\n      drawBoard()\n    }\n\n    // set the starting position\n    widget.start = function (useAnimation) {\n      widget.position('start', useAnimation)\n    }\n\n    // -------------------------------------------------------------------------\n    // Browser Events\n    // -------------------------------------------------------------------------\n\n    function stopDefault (evt) {\n      evt.preventDefault()\n    }\n\n    function mousedownSquare (evt) {\n      // do nothing if we're not draggable\n      if (!config.draggable) return\n\n      // do nothing if there is no piece on this square\n      var square = $(this).attr('data-square')\n      if (!validSquare(square)) return\n      if (!currentPosition.hasOwnProperty(square)) return\n\n      beginDraggingPiece(square, currentPosition[square], evt.pageX, evt.pageY)\n    }\n\n    function touchstartSquare (e) {\n      // do nothing if we're not draggable\n      if (!config.draggable) return\n\n      // do nothing if there is no piece on this square\n      var square = $(this).attr('data-square')\n      if (!validSquare(square)) return\n      if (!currentPosition.hasOwnProperty(square)) return\n\n      e = e.originalEvent\n      beginDraggingPiece(\n        square,\n        currentPosition[square],\n        e.changedTouches[0].pageX,\n        e.changedTouches[0].pageY\n      )\n    }\n\n    function mousedownSparePiece (evt) {\n      // do nothing if sparePieces is not enabled\n      if (!config.sparePieces) return\n\n      var piece = $(this).attr('data-piece')\n\n      beginDraggingPiece('spare', piece, evt.pageX, evt.pageY)\n    }\n\n    function touchstartSparePiece (e) {\n      // do nothing if sparePieces is not enabled\n      if (!config.sparePieces) return\n\n      var piece = $(this).attr('data-piece')\n\n      e = e.originalEvent\n      beginDraggingPiece(\n        'spare',\n        piece,\n        e.changedTouches[0].pageX,\n        e.changedTouches[0].pageY\n      )\n    }\n\n    function mousemoveWindow (evt) {\n      if (isDragging) {\n        updateDraggedPiece(evt.pageX, evt.pageY)\n      }\n    }\n\n    var throttledMousemoveWindow = throttle(mousemoveWindow, config.dragThrottleRate)\n\n    function touchmoveWindow (evt) {\n      // do nothing if we are not dragging a piece\n      if (!isDragging) return\n\n      // prevent screen from scrolling\n      evt.preventDefault()\n\n      updateDraggedPiece(evt.originalEvent.changedTouches[0].pageX,\n        evt.originalEvent.changedTouches[0].pageY)\n    }\n\n    var throttledTouchmoveWindow = throttle(touchmoveWindow, config.dragThrottleRate)\n\n    function mouseupWindow (evt) {\n      // do nothing if we are not dragging a piece\n      if (!isDragging) return\n\n      // get the location\n      var location = isXYOnSquare(evt.pageX, evt.pageY)\n\n      stopDraggedPiece(location)\n    }\n\n    function touchendWindow (evt) {\n      // do nothing if we are not dragging a piece\n      if (!isDragging) return\n\n      // get the location\n      var location = isXYOnSquare(evt.originalEvent.changedTouches[0].pageX,\n        evt.originalEvent.changedTouches[0].pageY)\n\n      stopDraggedPiece(location)\n    }\n\n    function mouseenterSquare (evt) {\n      // do not fire this event if we are dragging a piece\n      // NOTE: this should never happen, but it's a safeguard\n      if (isDragging) return\n\n      // exit if they did not provide a onMouseoverSquare function\n      if (!isFunction(config.onMouseoverSquare)) return\n\n      // get the square\n      var square = $(evt.currentTarget).attr('data-square')\n\n      // NOTE: this should never happen; defensive\n      if (!validSquare(square)) return\n\n      // get the piece on this square\n      var piece = false\n      if (currentPosition.hasOwnProperty(square)) {\n        piece = currentPosition[square]\n      }\n\n      // execute their function\n      config.onMouseoverSquare(square, piece, deepCopy(currentPosition), currentOrientation)\n    }\n\n    function mouseleaveSquare (evt) {\n      // do not fire this event if we are dragging a piece\n      // NOTE: this should never happen, but it's a safeguard\n      if (isDragging) return\n\n      // exit if they did not provide an onMouseoutSquare function\n      if (!isFunction(config.onMouseoutSquare)) return\n\n      // get the square\n      var square = $(evt.currentTarget).attr('data-square')\n\n      // NOTE: this should never happen; defensive\n      if (!validSquare(square)) return\n\n      // get the piece on this square\n      var piece = false\n      if (currentPosition.hasOwnProperty(square)) {\n        piece = currentPosition[square]\n      }\n\n      // execute their function\n      config.onMouseoutSquare(square, piece, deepCopy(currentPosition), currentOrientation)\n    }\n\n    // -------------------------------------------------------------------------\n    // Initialization\n    // -------------------------------------------------------------------------\n\n    function addEvents () {\n      // prevent \"image drag\"\n      $('body').on('mousedown mousemove', '.' + CSS.piece, stopDefault)\n\n      // mouse drag pieces\n      $board.on('mousedown', '.' + CSS.square, mousedownSquare)\n      $container.on('mousedown', '.' + CSS.sparePieces + ' .' + CSS.piece, mousedownSparePiece)\n\n      // mouse enter / leave square\n      $board\n        .on('mouseenter', '.' + CSS.square, mouseenterSquare)\n        .on('mouseleave', '.' + CSS.square, mouseleaveSquare)\n\n      // piece drag\n      var $window = $(window)\n      $window\n        .on('mousemove', throttledMousemoveWindow)\n        .on('mouseup', mouseupWindow)\n\n      // touch drag pieces\n      if (isTouchDevice()) {\n        $board.on('touchstart', '.' + CSS.square, touchstartSquare)\n        $container.on('touchstart', '.' + CSS.sparePieces + ' .' + CSS.piece, touchstartSparePiece)\n        $window\n          .on('touchmove', throttledTouchmoveWindow)\n          .on('touchend', touchendWindow)\n      }\n    }\n\n    function initDOM () {\n      // create unique IDs for all the elements we will create\n      createElIds()\n\n      // build board and save it in memory\n      $container.html(buildContainerHTML(config.sparePieces))\n      $board = $container.find('.' + CSS.board)\n\n      if (config.sparePieces) {\n        $sparePiecesTop = $container.find('.' + CSS.sparePiecesTop)\n        $sparePiecesBottom = $container.find('.' + CSS.sparePiecesBottom)\n      }\n\n      // create the drag piece\n      var draggedPieceId = uuid()\n      $('body').append(buildPieceHTML('wP', true, draggedPieceId))\n      $draggedPiece = $('#' + draggedPieceId)\n\n      // TODO: need to remove this dragged piece element if the board is no\n      // longer in the DOM\n\n      // get the border size\n      boardBorderSize = parseInt($board.css('borderLeftWidth'), 10)\n\n      // set the size and draw the board\n      widget.resize()\n    }\n\n    // -------------------------------------------------------------------------\n    // Initialization\n    // -------------------------------------------------------------------------\n\n    setInitialState()\n    initDOM()\n    addEvents()\n\n    // return the widget object\n    return widget\n  } // end constructor\n  \n\n  // TODO: do module exports here\n  // window['Chessboard'] = constructor\n\n  // // support legacy ChessBoard name\n  // window['ChessBoard'] = window['Chessboard']\n\n  // // expose util functions\n  // window['Chessboard']['fenToObj'] = fenToObj\n  // window['Chessboard']['objToFen'] = objToFen\n  return constructor\n\n} // end anonymous wrapper\n\nexport default ChessBoard()"],"sourceRoot":""}