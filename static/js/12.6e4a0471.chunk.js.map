{"version":3,"sources":["containers/ComputerGamePage/index.js"],"names":["$","window","jQuery","board","game","Chess","mapDispatchToProps","updateMoves","boardActions","updateStatusText","loginUserWithSocials","userActions","loginUserWithForm","updateLocalStorage","connect","state","boardInfo","piece","moves","statusText","boardType","user","currentStatusText","history","useAuthState","auth","authUser","useState","whiteSan","blackSan","id","index","gameMove","setGameMove","whiteTime","blackTime","isGameActive","timeLeft","setTimeLeft","isGameEndByTime","setIsGameEndByTime","moveSongRef","useRef","checkSongRef","updateStatus","statusGame","turn","isMyTurn","in_draw","in_check","in_checkmate","in_threefold_repetition","insufficient_material","in_stalemate","split","includes","current","play","useEffect","reset","prevState","game_over","timer","setInterval","clearInterval","generateID","makeEngineMove","lvl","innerWidth","computerMove","aiMove","fen","from","Object","keys","toLocaleLowerCase","to","values","move","promotion","san","position","config","pieceTheme","process","draggable","onDragStart","square","makeDots","allowMove","onDrop","source","target","removeDotSquares","setTimeout","onSnapEnd","onMouseoutSquare","onMouseoverSquare","Chessboard","resize","$board","squares","addClass","removeClass","className","links","playerNum","isGameEnded","changeSite","push","userName","points"],"mappings":"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","file":"static/js/12.6e4a0471.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Chess from 'chess.js/chess';\nimport Chessboard from '@chrisoakman/chessboardjs/dist/chessboard-1.0.0';\nimport { connect } from 'react-redux';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { aiMove } from 'js-chess-engine';\nimport ScoreBoard from '../../components/ScoreBoard';\nimport Game from '../../components/common/Game';\nimport { auth } from '../../firebase-config';\nimport {\n  removeDotSquares,\n  allowMove,\n  makeDots,\n  statusText,\n  isMyTurn,\n} from '../../components/utils/gameUtils/commonGameUtils';\nimport { generateID } from '../../components/utils';\nimport * as userActions from '../../redux/actions/userActions';\nimport * as boardActions from '../../redux/actions/boardActions';\nimport EndGameCard from '../../components/EndGameCard';\n\nconst $ = window.jQuery;\n\nlet board = null;\nconst game = new Chess();\n\nconst ComputerGamePage = ({\n  history,\n  boardType,\n  user,\n  piece,\n  updateMoves,\n  updateStatusText,\n  moves,\n  currentStatusText,\n  loginUserWithSocials,\n  loginUserWithForm,\n  updateLocalStorage,\n}) => {\n  const [authUser] = useAuthState(auth);\n  const [gameMove, setGameMove] = useState({\n    whiteSan: '',\n    blackSan: '',\n    id: null,\n    index: 0,\n  });\n  const [timeLeft, setTimeLeft] = useState({\n    whiteTime: 300,\n    blackTime: 300,\n    isGameActive: false,\n  });\n  const [isGameEndByTime, setIsGameEndByTime] = useState(false);\n  const moveSongRef = useRef(null);\n  const checkSongRef = useRef(null);\n\n  useEffect(() => {\n    if (authUser !== null && user === null) {\n      loginUserWithSocials(authUser);\n    }\n    if (authUser === null && user === null) {\n      loginUserWithForm();\n    }\n    return () => game.reset();\n  }, [authUser]);\n\n  useEffect(() => {\n    setTimeLeft((prevState) => ({\n      ...prevState,\n      isGameActive: false,\n    }));\n  }, [game.game_over(), isGameEndByTime]);\n\n  useEffect(() => {\n    let timer = null;\n    if (timeLeft.isGameActive) {\n      timer = setInterval(() => {\n        updateTimeLeft();\n      }, 1000);\n    }\n    if (timeLeft.whiteTime <= 0 || timeLeft.blackTime <= 0) {\n      clearInterval(timer);\n      setIsGameEndByTime(true);\n    }\n    return () => clearInterval(timer);\n  }, [timeLeft.isGameActive, timeLeft]);\n\n  function updateTimeLeft() {\n    if (game.turn() === 'w') {\n      setTimeLeft((prevState) => ({\n        ...prevState,\n        whiteTime: prevState.whiteTime - 1,\n      }));\n    } else {\n      setTimeLeft((prevState) => ({\n        ...prevState,\n        blackTime: prevState.blackTime - 1,\n      }));\n    }\n  }\n  useEffect(() => {\n    if (!gameMove) return;\n    const { whiteSan, blackSan, index } = gameMove;\n    if (whiteSan !== '' || blackSan !== '') {\n      updateMoves({\n        whiteSan,\n        blackSan,\n        index,\n        id: generateID(5),\n      });\n    }\n    if (whiteSan !== '' && blackSan !== '') {\n      setGameMove({\n        ...gameMove,\n        whiteSan: '',\n        blackSan: '',\n        id: null,\n      });\n    }\n  }, [gameMove]);\n  useEffect(() => {\n    function makeEngineMove() {\n      let lvl = 2;\n\n      if (window.innerWidth < 520) {\n        setTimeLeft((prevState) => ({\n          ...prevState,\n          blackTime: prevState.blackTime - 1,\n        }));\n        lvl = 1;\n      }\n      const computerMove = aiMove(game.fen(), lvl);\n\n      const from = Object.keys(computerMove)[0].toLocaleLowerCase();\n      const to = Object.values(computerMove)[0].toLocaleLowerCase();\n\n      const move = game.move({\n        from,\n        to,\n        promotion: 'q',\n      });\n\n      setGameMove((prevState) => ({\n        ...prevState,\n        blackSan: move?.san,\n      }));\n\n      board.position(game.fen());\n      updateStatus();\n    }\n\n    function onDragStart(square, piece) {\n      makeDots(game, square);\n\n      return (\n        !game.game_over() &&\n        game.turn() === 'w' &&\n        allowMove(game.turn(), piece)\n      );\n    }\n\n    function onDrop(source, target) {\n      removeDotSquares();\n      const move = game.move({\n        from: source,\n        to: target,\n        promotion: 'q',\n      });\n      if (move === null) {\n        return 'snapback';\n      }\n\n      window.innerWidth < 520\n        ? window.setTimeout(makeEngineMove, 2400)\n        : window.setTimeout(makeEngineMove, 3200);\n\n      setGameMove((prevState) => ({\n        ...prevState,\n        whiteSan: move?.san,\n        index: prevState.index + 1,\n      }));\n      setTimeLeft((prevState) => ({\n        ...prevState,\n        isGameActive: true,\n      }));\n    }\n\n    function onSnapEnd() {\n      board.position(game.fen());\n      updateStatus();\n    }\n\n    function onMouseoverSquare(square) {\n      makeDots(game, square);\n    }\n\n    const config = {\n      pieceTheme: `${process.env.PUBLIC_URL}/img/chesspieces/${piece}/{piece}.png`,\n      draggable: true,\n      position: 'start',\n      onDragStart,\n      onDrop,\n      onSnapEnd,\n      onMouseoutSquare: removeDotSquares,\n      onMouseoverSquare,\n    };\n\n    board = Chessboard('board', config);\n\n    $(window).resize(board.resize);\n\n    const $board = $('.chessboard-63f37');\n    const squares = $('.square-55d63');\n\n    if (boardType === 'wooden') {\n      $board.addClass('woodenBoard');\n      squares.addClass('transparent');\n    } else if (board === 'classic') {\n      $board.removeClass('woodenBoard');\n      squares.removeClass('transparent');\n    }\n    updateStatus();\n  }, []);\n\n  function updateStatus() {\n    const statusGame = statusText(\n      game.turn(),\n      1,\n      isMyTurn(1, game.turn()),\n      game.in_draw(),\n      game.in_check(),\n      game.in_checkmate(),\n      game.in_threefold_repetition(),\n      game.insufficient_material(),\n      game.in_stalemate()\n    );\n    if (statusGame.split(' ').includes('check')) {\n      checkSongRef.current.play();\n    } else {\n      moveSongRef.current.play();\n    }\n    updateStatusText(statusGame);\n  }\n\n  return (\n    <>\n      <div className=\"page__wrapper\">\n        {(game.game_over() || isGameEndByTime) && (\n          <EndGameCard timeLeft={timeLeft} turn={game.turn()} user={user} />\n        )}\n        <Game\n          timeLeft={timeLeft}\n          moveSongRef={moveSongRef}\n          checkSongRef={checkSongRef}\n          links={false}\n          playerNum={1}\n          isGameEnded={game.game_over() || isGameEndByTime}\n          changeSite={history.push}\n          updateLocalStorage={updateLocalStorage}\n          userName={user?.userName}\n          points={user?.points}\n          turn={game.turn()}\n        />\n        <ScoreBoard moves={moves} statusText={currentStatusText} />\n      </div>\n    </>\n  );\n};\n\nfunction mapStateToProps(state) {\n  const { piece, board, moves, statusText } = state.boardInfo;\n  const { user } = state;\n  return {\n    piece,\n    boardType: board,\n    user,\n    moves,\n    currentStatusText: statusText,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateMoves: boardActions.updateMoves,\n  updateStatusText: boardActions.updateStatusText,\n  loginUserWithSocials: userActions.loginUserWithSocials,\n  loginUserWithForm: userActions.loginUserWithForm,\n  updateLocalStorage: userActions.updateLocalStorage,\n};\n\nComputerGamePage.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  boardType: PropTypes.string.isRequired,\n  piece: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    userName: PropTypes.string,\n    photo: PropTypes.string,\n    uid: PropTypes.string,\n    points: PropTypes.number,\n  }),\n  moves: PropTypes.arrayOf(\n    PropTypes.shape({\n      whiteSan: PropTypes.string,\n      blackSan: PropTypes.string,\n      index: PropTypes.number,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  currentStatusText: PropTypes.string.isRequired,\n  updateMoves: PropTypes.func.isRequired,\n  updateStatusText: PropTypes.func.isRequired,\n  loginUserWithSocials: PropTypes.func.isRequired,\n  loginUserWithForm: PropTypes.func.isRequired,\n  updateLocalStorage: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComputerGamePage);\n"],"sourceRoot":""}