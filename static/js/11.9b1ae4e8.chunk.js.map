{"version":3,"sources":["components/OnlineGame/index.js","containers/OnlineGamePage/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["$","window","jQuery","unsubscribe","board","OnlineGame","boardType","piece","user","updateMoves","mode","updateStatusText","changeSite","updateLocalStorage","props","useState","Chess","gameEngine","token","match","params","state","setState","moveSongRef","useRef","checkSongRef","isGameEndByTime","setIsGameEndByTime","useEffect","timer","playerNum","figurePlayer","isGameActive","setInterval","setTimeLeft","timeLeft","whiteTime","blackTime","clearInterval","cb","id","game","engine","load","fen","isMyTurn","turn","position","config","pieceTheme","process","draggable","onDragStart","square","makeDots","addClass","game_over","allowMove","onDrop","source","target","removeClass","removeDotSquares","move","from","to","promotion","chessRef","firestore","collection","doc","update","whiteSan","san","blackSan","onSnapEnd","onMouseoutSquare","onMouseoverSquare","Chessboard","orientation","$board","squares","resize","initBoard","updateBoard","p1_token","p2_token","moveIndex","prevState","statusText","in_draw","in_check","in_checkmate","in_threefold_repetition","insufficient_material","in_stalemate","updateState","forEach","name","where","onSnapshot","querySnapshot","size","docs","map","data","split","includes","current","play","generateID","firebase","FieldValue","increment","EndGameCard","Game","links","userName","points","isGameEnded","propTypesd","PropTypes","string","shape","photo","uid","number","func","isRequired","withRouter","mapDispatchToProps","boardActions","loginUserWithSocials","userActions","loginUserWithForm","connect","boardInfo","moves","history","useAuthState","auth","authUser","className","push","ScoreBoard","isOnline","_objectWithoutProperties","excluded","key","i","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"mappings":"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","file":"static/js/11.9b1ae4e8.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Chess from 'chess.js/chess';\nimport Chessboard from '@chrisoakman/chessboardjs/dist/chessboard-1.0.0';\nimport { withRouter } from 'react-router-dom';\nimport Game from '../common/Game';\nimport EndGameCard from '../EndGameCard';\nimport firebase, { firestore } from '../../firebase-config';\nimport { figurePlayer, setTimeLeft } from '../utils/gameUtils/onlineGameUtils';\nimport {\n  removeDotSquares,\n  allowMove,\n  makeDots,\n  statusText,\n  isMyTurn,\n} from '../utils/gameUtils/commonGameUtils';\nimport { generateID } from '../utils';\n\nconst $ = window.jQuery;\n\nconst INITIAL_FEN = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nlet unsubscribe = null;\nlet board = null;\n\nconst OnlineGame = ({\n  boardType,\n  piece,\n  user,\n  mode,\n  updateMoves,\n  updateStatusText,\n  changeSite,\n  updateLocalStorage,\n  ...props\n}) => {\n  const [gameEngine] = useState(new Chess());\n  const [state, setState] = useState({\n    token: props.match.params.token,\n  });\n  const moveSongRef = useRef(null);\n  const checkSongRef = useRef(null);\n\n  const [isGameEndByTime, setIsGameEndByTime] = useState(false);\n  useEffect(() => {\n    let timer = null;\n    const playerNum = figurePlayer(state.token, state);\n    if (state.isGameActive && playerNum === 1) {\n      timer = setInterval(() => {\n        setTimeLeft(state, gameEngine);\n      }, 1000);\n    }\n    if (state.timeLeft?.whiteTime <= 0 || state.timeLeft?.blackTime <= 0) {\n      clearInterval(timer);\n      setIsGameEndByTime(true);\n    }\n    return () => clearInterval(timer);\n  }, [state.isGameActive, state.timeLeft]);\n\n  useEffect(() => {\n    ListenForUpdates(state.token, (id, game) => {\n      updateBoard(id, game);\n      updateState(id, game);\n    });\n\n    return () => unsubscribe && unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    if (state?.statusText?.split(' ').includes('check')) {\n      checkSongRef.current.play();\n    } else {\n      moveSongRef.current.play();\n    }\n    updateStatusText(state.statusText);\n  }, [state.statusText]);\n\n  useEffect(() => {\n    const { whiteSan, blackSan } = state;\n    if (whiteSan || blackSan) {\n      updateMoves({\n        whiteSan,\n        blackSan,\n        id: generateID(5),\n        moveIndex: state.moveIndex ?? 1,\n      });\n    }\n    const chessRef = firestore.collection('games').doc(state.id);\n    if (state.whiteSan && state.blackSan) {\n      chessRef.update({\n        whiteSan: '',\n        blackSan: '',\n        moveIndex: firebase.firestore.FieldValue.increment(1),\n      });\n    }\n  }, [state.whiteSan, state.blackSan]);\n\n  function updateState(\n    id,\n    {\n      p1_token,\n      p2_token,\n      whiteSan,\n      blackSan,\n      timeLeft,\n      moveIndex,\n      isGameActive,\n    }\n  ) {\n    const playerNum = figurePlayer(state.token, { p1_token, p2_token });\n    setState((prevState) => ({\n      ...prevState,\n      isGameActive,\n      timeLeft,\n      id,\n      moveIndex,\n      p1_token,\n      p2_token,\n      whiteSan,\n      blackSan,\n      statusText: statusText(\n        gameEngine.turn(),\n        playerNum,\n        isMyTurn(playerNum, gameEngine.turn()),\n        gameEngine.in_draw(),\n        gameEngine.in_check(),\n        gameEngine.in_checkmate(),\n        gameEngine.in_threefold_repetition(),\n        gameEngine.insufficient_material(),\n        gameEngine.in_stalemate()\n      ),\n    }));\n  }\n\n  function updateBoard(id, game) {\n    const engine = gameEngine;\n    const playerNum = figurePlayer(state.token, game);\n    engine.load(game.fen || INITIAL_FEN);\n\n    if (!board) {\n      board = initBoard(id, game);\n      board.position(engine.fen());\n    } else if (isMyTurn(playerNum, engine.turn())) {\n      board.position(engine.fen());\n    }\n  }\n  function initBoard(id, game) {\n    const engine = gameEngine;\n    const playerNum = figurePlayer(state.token, game);\n    const config = {\n      pieceTheme: `${process.env.PUBLIC_URL}/img/chesspieces/${piece}/{piece}.png`,\n      draggable: true,\n      position: 'start',\n      onDragStart,\n      onDrop,\n      onSnapEnd,\n      onMouseoutSquare: removeDotSquares,\n      onMouseoverSquare,\n    };\n\n    board = Chessboard('board', config);\n    if (playerNum === 2) {\n      board.orientation('black');\n    }\n\n    const $board = $('.chessboard-63f37');\n    const squares = $('.square-55d63');\n\n    if (boardType === 'wooden') {\n      $board.addClass('woodenBoard');\n      squares.addClass('transparent');\n    } else if (board === 'classic') {\n      $board.removeClass('woodenBoard');\n      squares.removeClass('transparent');\n    }\n\n    $(window).resize(board.resize);\n\n    return board;\n\n    function onMouseoverSquare(square) {\n      const canIMove = isMyTurn(playerNum, engine.turn());\n\n      if (canIMove) {\n        makeDots(gameEngine, square);\n      }\n    }\n\n    function onDragStart(square, piece) {\n      makeDots(gameEngine, square);\n      const img = $(`img[data-piece=\"${piece}\"]`);\n      img.addClass('z-index');\n      return (\n        !engine.game_over() &&\n        isMyTurn(playerNum, engine.turn()) &&\n        allowMove(engine.turn(), piece)\n      );\n    }\n\n    function onDrop(source, target, piece) {\n      const img = $(`img[data-piece=\"${piece}\"]`);\n      img.removeClass('z-index');\n      removeDotSquares();\n      const move = gameEngine.move({\n        from: source,\n        to: target,\n        promotion: 'q',\n      });\n      if (move === null) return 'snapback';\n      const chessRef = firestore.collection('games').doc(id);\n      if (playerNum === 1) {\n        chessRef.update({\n          fen: engine.fen(),\n          whiteSan: move.san,\n          isGameActive: true,\n        });\n      } else if (playerNum === 2) {\n        chessRef.update({\n          fen: engine.fen(),\n          blackSan: move.san,\n        });\n      }\n    }\n    function onSnapEnd() {\n      // moveSongRef.current.play();\n      return board.position(engine.fen());\n    }\n  }\n\n  function ListenForUpdates(token, cb) {\n    ['p1_token', 'p2_token'].forEach((name) => {\n      const chessRef = firestore.collection('games').where(name, '==', token);\n      unsubscribe = chessRef.onSnapshot((querySnapshot) => {\n        if (querySnapshot.size) {\n          const [data] = querySnapshot.docs.map((doc) => {\n            return {\n              data: doc.data(),\n              id: doc.id,\n            };\n          });\n          cb(data.id, data.data);\n        }\n      });\n    });\n  }\n  return (\n    <>\n      {(gameEngine.game_over() || isGameEndByTime) && (\n        <EndGameCard\n          timeLeft={state.timeLeft}\n          turn={gameEngine.turn()}\n          user={user}\n        />\n      )}\n\n      <Game\n        timeLeft={state.timeLeft}\n        links\n        moveSongRef={moveSongRef}\n        checkSongRef={checkSongRef}\n        p1_token={state.p1_token}\n        p2_token={state.p2_token}\n        userName={user?.userName}\n        points={user?.points}\n        playerNum={figurePlayer(state.token, state)}\n        isGameEnded={gameEngine.game_over() || isGameEndByTime}\n        changeSite={changeSite}\n        updateLocalStorage={updateLocalStorage}\n        token={state.token}\n      />\n    </>\n  );\n};\n\nOnlineGame.propTypesd = {\n  board: PropTypes.string,\n  piece: PropTypes.string,\n  token: PropTypes.string,\n  user: PropTypes.shape({\n    userName: PropTypes.string,\n    photo: PropTypes.string,\n    uid: PropTypes.string,\n    points: PropTypes.number,\n  }),\n  updateMoves: PropTypes.func.isRequired,\n  updateStatusText: PropTypes.func.isRequired,\n  changeSite: PropTypes.func.isRequired,\n  updateLocalStorage: PropTypes.func.isRequired,\n};\n\nexport default withRouter(OnlineGame);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport OnlineGame from '../../components/OnlineGame';\nimport ScoreBoard from '../../components/ScoreBoard';\nimport * as boardActions from '../../redux/actions/boardActions';\nimport * as userActions from '../../redux/actions/userActions';\nimport { auth } from '../../firebase-config';\n\nconst OnlineGamePage = ({\n  user,\n  moves,\n  statusText,\n  piece,\n  boardType,\n  mode,\n  history,\n  updateMoves,\n  updateStatusText,\n  loginUserWithSocials,\n  loginUserWithForm,\n  updateLocalStorage,\n}) => {\n  const [authUser] = useAuthState(auth);\n  useEffect(() => {\n    if (authUser !== null && user === null) {\n      loginUserWithSocials(authUser);\n    }\n    if (authUser === null && user === null) {\n      loginUserWithForm();\n    }\n  }, [authUser]);\n  return (\n    <>\n      <div className=\"page__wrapper\">\n        <OnlineGame\n          changeSite={history.push}\n          user={user}\n          piece={piece}\n          boardType={boardType}\n          updateMoves={updateMoves}\n          updateStatusText={updateStatusText}\n          updateLocalStorage={updateLocalStorage}\n          userName={user?.userName}\n          points={user?.points}\n          mode={mode}\n        />\n        <ScoreBoard isOnline moves={moves} statusText={statusText} />\n      </div>\n    </>\n  );\n};\nfunction mapStateToProps(state) {\n  const { moves, statusText, piece, board, mode } = state.boardInfo;\n  const { user } = state;\n  return {\n    moves,\n    statusText,\n    piece,\n    mode,\n    boardType: board,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateMoves: boardActions.updateMoves,\n  updateStatusText: boardActions.updateStatusText,\n  loginUserWithSocials: userActions.loginUserWithSocials,\n  loginUserWithForm: userActions.loginUserWithForm,\n  updateLocalStorage: userActions.updateLocalStorage,\n};\n\nOnlineGamePage.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  boardType: PropTypes.string.isRequired,\n  piece: PropTypes.string.isRequired,\n  mode: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    userName: PropTypes.string,\n    photo: PropTypes.string,\n    uid: PropTypes.string,\n    points: PropTypes.number,\n  }),\n  moves: PropTypes.arrayOf(\n    PropTypes.shape({\n      whiteSan: PropTypes.string,\n      blackSan: PropTypes.string,\n      index: PropTypes.number,\n      id: PropTypes.string,\n    })\n  ).isRequired,\n  statusText: PropTypes.string,\n  updateMoves: PropTypes.func.isRequired,\n  updateStatusText: PropTypes.func.isRequired,\n  loginUserWithSocials: PropTypes.func.isRequired,\n  loginUserWithForm: PropTypes.func.isRequired,\n  updateLocalStorage: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OnlineGamePage);\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}